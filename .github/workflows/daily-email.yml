name: Daily Email Reminder

on:
  schedule:
    # 매일 한국시간 오전 9시 (UTC 00:00 = KST 09:00)
    - cron: '0 0 * * *'
  workflow_dispatch: # 수동 실행 가능

jobs:
  send-daily-email:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create config file and environment variables
      env:
        SMTP_PASS: ${{ secrets.SMTP_PASS }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
      run: |
        # Create config.yaml with correct port (8080)
        cat > config.yaml << EOF
        base_url: https://glowing-train-pjqg4gx9v9w53r99w-8080.app.github.dev/complete
        dashboard_url: https://glowing-train-pjqg4gx9v9w53r99w-8080.app.github.dev/dashboard
        smtp:
          host: smtp.gmail.com
          port: 465
          user: dadae5th@gmail.com
          pass: ${SMTP_PASS}
          sender_name: 해야할일 알림
          sender_email: dadae5th@gmail.com
        secret: gBckLh5s3CSP5VIu6TPi0f1aic6tofQ9EFgrcwf24W1Zl4B2
        EOF
        
        # Create .env file for environment variables
        cat > .env << EOF
        SUPABASE_URL=${SUPABASE_URL}
        SUPABASE_KEY=${SUPABASE_KEY}
        SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
        SMTP_HOST=smtp.gmail.com
        SMTP_PORT=465
        SMTP_USER=dadae5th@gmail.com
        SMTP_PASS=${SMTP_PASS}
        SMTP_SENDER_NAME=해야할일 알림
        SMTP_SENDER_EMAIL=dadae5th@gmail.com
        BASE_URL=https://glowing-train-pjqg4gx9v9w53r99w-8080.app.github.dev/complete
        DASHBOARD_URL=https://glowing-train-pjqg4gx9v9w53r99w-8080.app.github.dev/dashboard
        SECRET=gBckLh5s3CSP5VIu6TPi0f1aic6tofQ9EFgrcwf24W1Zl4B2
        EOF
        
    - name: Initialize database and sample data
      run: |
        python -c "
        import sqlite3
        import os
        from datetime import datetime
        
        # 데이터베이스 초기화
        conn = sqlite3.connect('reminder.db')
        
        # 스키마 생성
        conn.execute('''
        CREATE TABLE IF NOT EXISTS users (
            email TEXT PRIMARY KEY,
            name TEXT NOT NULL,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP
        )''')
        
        conn.execute('''
        CREATE TABLE IF NOT EXISTS tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            assignee_email TEXT,
            frequency TEXT CHECK(frequency IN ('daily', 'weekly', 'monthly')),
            status TEXT DEFAULT 'pending',
            assignee TEXT,
            hmac_token TEXT,
            last_completed_at TEXT,
            due_date TEXT,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            updated_at TEXT DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (assignee_email) REFERENCES users (email)
        )''')
        
        # 샘플 데이터 추가
        conn.execute('INSERT OR IGNORE INTO users (email, name) VALUES (?, ?)', 
                    ('bae.jae.kwon@drbworld.com', '배재권'))
        
        # 샘플 업무 추가
        tasks = [
            ('일일 이메일 확인', 'bae.jae.kwon@drbworld.com', 'daily', '배재권'),
            ('주간 회의 자료 준비', 'bae.jae.kwon@drbworld.com', 'weekly', '배재권'),
            ('월간 성과 보고서 작성', 'bae.jae.kwon@drbworld.com', 'monthly', '배재권')
        ]
        
        for title, email, freq, assignee in tasks:
            conn.execute('''
                INSERT OR IGNORE INTO tasks (title, assignee_email, frequency, assignee, status)
                VALUES (?, ?, ?, ?, 'pending')
            ''', (title, email, freq, assignee))
        
        conn.commit()
        conn.close()
        print('Database initialized with sample data')
        "
        
    - name: Debug - Check files
      run: |
        pwd
        ls -la
        ls -la send_digest_supabase.py || echo "send_digest_supabase.py not found"
        
    - name: Send daily emails
      run: |
        python send_digest_supabase.py
        
    - name: Log completion
      run: |
        echo "Daily email job completed at $(date)"
        echo "Email sending status: SUCCESS"
